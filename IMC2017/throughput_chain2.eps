%!PS-Adobe-3.0 EPSF-3.0
%%HiResBoundingBox: 0.000000 0.000000 594.000000 245.000000
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.12.4 (Build 16E195) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 594 245
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 594 245
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: GillSans
%!FontType1-1.0: GillSans 1.0000.1.0000
/FontInfo 1 dict dup begin
/FSType 6 def
end readonly def
14 dict begin/FontName /GillSans def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /H put
dup 34 /t put
dup 35 /p put
dup 36 /e put
dup 37 /r put
dup 38 /f put
dup 39 /h put
dup 40 /one put
dup 41 /N put
dup 42 /A put
dup 43 /T put
dup 44 /two put
dup 45 /a put
dup 46 /c put
dup 47 /zero put
dup 48 /period put
dup 49 /six put
dup 50 /nine put
dup 51 /space put
dup 52 /M put
dup 53 /B put
dup 54 /s put
dup 55 /three put
dup 56 /five put
dup 57 /seven put
dup 58 /P put
dup 59 /o put
dup 60 /x put
dup 61 /y put
dup 62 /eight put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[2048 -1163 1 index div -473 2 index div 2191 3 index div 1896 5 -1 roll div]cvx def
/sfnts [<







0DB8FFC0B32323370D2F2B2BED33332F2F715DED332F2B2B2B711117392B003FED332F2B2B3FED1217395D5D332F2B5D2B2B870E2E2B7D10C43130005D37351E01333236353426272E0135343633321715262322061514161F0116151406232226544DA13739523558B06DA582878EA26735413B4A41E6B18B528042C436433827283532628B526A864CB4622D25203A2925829E7191230000010000FFF002A804560015003E40200101140595020F0A0A08950D132B0F3B0F4B0F0303030A0A17020585131515132F332F10FD3C11332F332F5D003FED337D2F183FFD3C337C2F183130110115211521111433323715062322272E0235112301560123FEDD83626D697C7D531A2217A003060150BEA4FE3D9E42AA3B491637597D019800000000010000000004000398000B009A405C0505060809080709040202010B0A0B000A030505040201020301060808090B0B0A000700010606C307001407070004030A0AC30904140909040304070601000A090F000104010003200340035003700305000301030A0909030603072F17332F332F715D33332F33003F3C3C3C103C3C3C87052E2B877DC4872E182B877DC407083C083C8708103C08C48708103C08C4870810C408C4313001330901230901230901330102FCE9FE850196E9FEDFFEEFE50183FE7DE501110398FE3BFE2D014AFEB601D301C5FEC400010000FE2B03810398000700744041070706040405030000010202C3030014030300040403070606C305041405050407040502031B010006050F04070203006001A001020101500701070303070603052F17332F192F5D33182F5D3311331133003F3C3C3C3F3C12393987052E2B87087DC487052E182B877DC487083C08C43130013301230901331302B4CDFD75CB0139FE9CCFF80398FA93029A02D3FDF90001000000010000DB1BF5D15F0F3CF5011B080000000000AB78180000000000D0B95DA0FB75FE27088F0768000000090001000000000000000100000758FE28000008B4FB75FEB4088F000100000000000000000000000000000020080001000239000001C100660400003F0400019E0400004604000083040000660400005C04000064040000420400004A055600000481009A05D5009A063F0096063F00A00414008F04D50023036A00370381004E03D50054020000120400007D046A004C04000075032B008D0314005402AA0000040000000381000000000000000000300030004E00A200BC012801AE0214028C02C6035003BC0418048604BA0518054C058A05AC064606A407060756079407DA0822085808FA093E09AA09FA09FA0000000100000020005300070044000400020010002F00AA000002AC081E00030001B800A02BB800962B40B460CF70CF0260CD70CD0210EF019FEE0130EEAFEE0200ED0130E70110E401

00>] def
/CharStrings 32 dict dup begin
/.notdef 0 def
/space 1 def
/period 2 def
/zero 3 def
/one 4 def
/two 5 def
/three 6 def
/five 7 def
/six 8 def
/seven 9 def
/eight 10 def
/nine 11 def
/A 12 def
/B 13 def
/H 14 def
/M 15 def
/N 16 def
/P 17 def
/T 18 def
/a 19 def
/c 20 def
/e 21 def
/f 22 def
/h 23 def
/o 24 def
/p 25 def
/r 26 def
/s 27 def
/t 28 def
/x 29 def
/y 30 def
/gid422 31 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontInfo 1 dict dup begin
/FSType 6 def
end readonly def
/FontType 1 def
/FontMatrix [ 0.00048828125 0 0 0.00048828125 0 0 ] def
/FontBBox{-1163 -473 2191 1896}def
/UniqueID 4259537 def
currentdict currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA5567765E71F2B911B3C5586B741EEB93F3C73016EC16BFF283758900903D203992EFC8BAFAF13579C602F38C931313987B77B87D3A530FEA8139219B56B58888BA339BA81F732C172C171196E3424C160EB700E0FF92EFC158D3C4AFDB2E8E73F05D5B18E4C35B14EEBFAB611CA8D3F5FD49579057195171E74505051132E5BB2BDD6F82534C56764A5AC4884DCA91C1E97AC04186A09B65BF0743DE2B82E32DE3183AE20BFC41F9CD13D6BCBD8559376167BFCF80E6CED845A62C8B0463DEC5D89D8D74D42F985F53D317EF98EE2E6E7EDA5A4DA93D432746CCDB7DAEB3835245616E077724D32E00719784778B7B7D4633C08539391DDCBEC6EE2FF13D6944C265B9492C0ED09D9E66DD9291DC9725B5EC47DD89EE3459C146B4305C92E248CB5C8220A1030C6A1EA2B38BFF79F4138B4660D4E6D43C36A48BFE97CEC9A8B865B2AF2B1B4908FCC0215BDC8689E0369E3A6A12D4B357B4FF108D8475B1397149B8ECA984415FBAC19AE3C578B727EF65B39229A5D02EA71497DE943E3F223B18250EC2F7A49D3B83CF08F19F924628A4833A3B3646DE13924232EBFE35B692C831011238C3D1B20DCD543A763DF3571B9F7D79C43061B1E07A27B355DF2EC1CA6FFE7D7F41B5C11F1981A3EE370C632214ADBDBA7BF33567928492DDBD0DF0D3D64B2A13E5CE9769C83B19CF322CD4E26DE76401F2651368D727120B3740ACF19087D4D425F4E27909438764824728D0504074B073A14855007870DB317308CCBDFEED474F228143ACBD443FED1CCCF4339900EFFACB6B6AE7AC6598136BD16DD8F5E4203921CF352640B54D

06675C983C9337EF0C730F0473B1A01F980452E0A2E679536CF67044E2FA2E9205BED59E4CC3ABE7A18A3A1E363BC598E282B7865CCD9F330570DAD357DE468C42A3A9B933438537BFA5633A6C5C2F5ACEAF7B58C5C112046C6F20CA7EDE034DA454B9B270DC9D38B1C8993A6DEEA28BE934C9A5E535A90A14808DA238F80BC1FE4080EB941E88635417A4463D70808A93C47FFBA576067D9C3F7182B4C9DAD24C51EE55A2EE9D38437369171AC6670D4E0E492AFC67A67BA64D3CF728BA68F458130C69F8011676FA4ECC9C879836EB2B1AF71DB510BD9DB989215954CEBE77DCDE6FE5979F3FFCF28AD7FA985CF09096745155B83265CD5C53DDFFE424C36E0408CB7A829B50F33538574F6EEC73493C5B8985181906F657A07F1F930F82ADB210A78B544D90A8522E986F10C1A251A1668CC2816AFFF722F54AA0245172A4C9B9034C665BC5F5863A1F69F46C33D2BFE101C89F4974101A7D25108C9DA9026B4026A1499F0FFF0743C1A5705F510CB0687C783B4FDE7B4184227567EE5D7BD6AB46CD24F7E45E7F882EAFA087CBEF5CE665937409D1DB5042C973FB36F669A613FFE83C9F3CFFC8216C48A385EBCC988E206F79D2FC89D2BC3F4E65CC6C35A2F26B597324BCBEC1EF5F5153843AC927C713AFF681AF796FC5CD60D50432F2FC21C50828BADF907BF6B6177D996072D9DF3B1493EEAE2DA198848CB6F3C44111263392A61839323255BB82737976CA9D17B25DE468780EC3707AE023C8D1A498CC131494C823D8F862C15DC70CE91C1E0B2FB0B9BB338BAA97BC73D1198D4DD91DC5679ED2FA90BAF22EF6F61C38B51BC4CC20ED62E27546C7009079D04D2045C464F5C11DBB2D31F33CF9E9290079C95455A6195EB2D7735B848A45BBE3244B22BC19310F015A2CD2D363E4C914D320416F376191829CA69E9DC28E2FB11C4E14EFE2F73C9D081DBF98FEC19B2AB6BBBDF6586F4FF914FF05134CB2EE4A54BF9EF65DFEF2C1F138796093B07A20E79F28B13522A10AE0E54A43503A5F21722EAA7C9961B9F51B195FD5081E4B0206922AB339F302CF723C5ACB7837E30194890ADB6E4F45D7CC7D75E30879A927E9F4A046BE468531D2F0CF5963E191A6E29D06F3DCC4BF7F32CB6691D9DD2183AF0A41327FA745CF6BD845F9DCA08269687A55E360DAE3426BE98AC43C2B5A8701E665BF1DB4483B5C72731E0C63B5F62FB765087C2C54C6C82E6239F013E67A8541F7D1F84A450061EC1CCD6FE4CA96136A625F015DD5468D5905D7A37049DBCBD3CD678BF024A6DDC4EE55E6557FDB3BE9855AC17AE2E63B30CC8B571A8ACD9DD419194376374D60AF410E8329D643956292597DF61226C8D9A3597DB5D079E8BC59D33993A6FEE2AC4CAD997406DCB435F5CDF542A3C9B8BB22A5E2E0941A37A91ACBFF7E33FABD6CFF18595660071D

50F7E86CA06ED443EC3835170D82A184E6C5955C6DDC3C68617FCB98F8A5A2A4F9BC9212633E059E1A457B072B337BEE6D61B00C18F6DE38BED7724406531FC5A20B0C32060ECC84926231C08AA1E8D4B76DA45E03DCCE171DCCF3C44EAEA2337FBC7400D12E732FCE89B109B3F54F5622506CD68727191536D163FFD82333B3D018AF4486DC16245C19E18960C59672C53A847C47927B5FE02589DCAEF5A069E33E192A1E0F1209E0943751954F9B8406690FF2DC8A7C5A2D3A3F2895FC3BEB7F64D06A67795B6AE036ACE645C2F73159DB5D2E16500750AAE09BC96383BFF1A0714F4CD0DF91699B3B91699A93817EB298D894A51E631C407F871D3839C8198F13F61D481DDC102141FD01989DBAA2C1D6E19CEE3C2BD5E32B7588049FE62BC83007FFE5C74603BE8437C7F2EBDD52CA1E30237FC589C282062C8DE92632936E5C95BA0E3BEEAE1A416FB5A1F181B723D345028D2D4A81FA7E687A36B049317C27CF8221617ECD594908EC6A640DBF94AC28A8DF
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/GillSans cguidfix
/F1.1/GillSans renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ { 1.8008  exp } bind { 1.8008  exp } bind { 1.8008  exp } bind ] def 
/MatrixABC [ 0.4295 0.2318 0.0204 0.3278 0.6722 0.1111 0.1933 0.0960 0.9578 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
[ /CIEBasedA 5 dict dup begin /WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeA { { 1.8008  exp } bind  exec} bind 
def 
/MatrixA [ 0.9642 1.0000 0.8249 ] def 
/RangeLMN [ 0.0 2.0000 0.0 2.0000 0.0 2.0000 ] def 
/DecodeLMN [ { 0.9857  mul} bind { 1.0000  mul} bind { 1.3202  mul} bind ] def 
end ] /Cs2 exch/ColorSpace dr pop
%%EndPageSetup
/Cs1 SC
1 1 1 sc
q
0 0 594 245 rc
-1472 705 m
838 705 l
838 -1644 l
-1472 -1644 l
h
-1472 705 m
f
10.015739 166.41733 m
81.889755 166.41733 l
86.308029 166.41733 89.889755 162.8356 89.889755 158.41733 c
89.889755 92.212601 l
89.889755 87.794327 86.308029 84.212601 81.889755 84.212601 c
10.015739 84.212601 l
5.5974612 84.212601 2.0157394 87.794327 2.0157394 92.212601 c
2.0157394 158.41733 l
2.0157394 162.8356 5.5974612 166.41733 10.015739 166.41733 c
h
10.015739 166.41733 m
f
1 J
1 j
0.60000002 i
0 0 0 sc
1 0 0 -1 -1472 705 cm
1482.0157 538.5827 m
1553.8898 538.5827 l
1558.308 538.5827 1561.8898 542.16437 1561.8898 546.5827 c
1561.8898 612.78741 l
1561.8898 617.20569 1558.308 620.78741 1553.8898 620.78741 c
1482.0157 620.78741 l
1477.5974 620.78741 1474.0157 617.20569 1474.0157 612.78741 c
1474.0157 546.5827 l
1474.0157 542.16437 1477.5974 538.5827 1482.0157 538.5827 c
h
1482.0157 538.5827 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 38.928635 126.40552 cm
/F1.1[ 16 0 0 -16 0 0]sf
-24.5 5.5 m
(!""#$%&)[ 11.664062 5.328125 5.328125 8.000000 7.664062 6.335938 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
74.881882 155.07875 m
87.889755 155.07875 l
88.994324 155.07875 89.889755 154.18332 89.889755 153.07875 c
89.889755 100.38583 l
89.889755 99.281258 88.994324 98.385834 87.889755 98.385834 c
74.881882 98.385834 l
73.777313 98.385834 72.881882 99.281258 72.881882 100.38583 c
72.881882 153.07875 l
72.881882 154.18332 73.777313 155.07875 74.881882 155.07875 c
h
74.881882 155.07875 m
f
[
4
4
] 0 d
0.60000002 i
0 0 0 sc
1 0 0 -1 -1472 705 cm
1546.8818 549.92126 m
1559.8898 549.92126 l
1560.9944 549.92126 1561.8898 550.81671 1561.8898 551.92126 c
1561.8898 604.6142 l
1561.8898 605.71875 1560.9944 606.6142 1559.8898 606.6142 c
1546.8818 606.6142 l
1545.7773 606.6142 1544.8818 605.71875 1544.8818 604.6142 c
1544.8818 551.92126 l
1544.8818 550.81671 1545.7773 549.92126 1546.8818 549.92126 c
h
1546.8818 549.92126 m
S
/Cs2 SC
0 sc
0 i
0 1 1 0 81.059044 127.57481 cm
/F1.1[ 15 0 0 -15 0 0]sf
-14 5.5 m
($"'\()[ 7.185059 4.995117 7.500000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
171.78345 166.41733 m
243.65747 166.41733 l
248.07574 166.41733 251.65747 162.8356 251.65747 158.41733 c
251.65747 92.212601 l
251.65747 87.794327 248.07574 84.212601 243.65747 84.212601 c
171.78345 84.212601 l
167.36517 84.212601 163.78345 87.794327 163.78345 92.212601 c
163.78345 158.41733 l
163.78345 162.8356 167.36517 166.41733 171.78345 166.41733 c
h
171.78345 166.41733 m
f
[] 0 d
0.60000002 i
0 0 0 sc
1 0 0 -1 -1472 705 cm
1643.7834 538.5827 m
1715.6575 538.5827 l
1720.0758 538.5827 1723.6575 542.16437 1723.6575 546.5827 c
1723.6575 612.78741 l
1723.6575 617.20569 1720.0758 620.78741 1715.6575 620.78741 c
1643.7834 620.78741 l
1639.3652 620.78741 1635.7834 617.20569 1635.7834 612.78741 c
1635.7834 546.5827 l
1635.7834 542.16437 1639.3652 538.5827 1643.7834 538.5827 c
h
1643.7834 538.5827 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 207.98424 126.40552 cm
/F1.1[ 16 0 0 -16 0 0]sf
-16 5.5 m
(\)*+)[ 12.492188 9.070312 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
165.937 155.07875 m
178.94487 155.07875 l
180.04944 155.07875 180.94487 154.18332 180.94487 153.07875 c
180.94487 100.38583 l
180.94487 99.281258 180.04944 98.385834 178.94487 98.385834 c
165.937 98.385834 l
164.83243 98.385834 163.937 99.281258 163.937 100.38583 c
163.937 153.07875 l
163.937 154.18332 164.83243 155.07875 165.937 155.07875 c
h
165.937 155.07875 m
f
[
4
4
] 0 d
0.60000002 i
0 0 0 sc
1 0 0 -1 -1472 705 cm
1637.937 549.92126 m
1650.9448 549.92126 l
1652.0494 549.92126 1652.9448 550.81671 1652.9448 551.92126 c
1652.9448 604.6142 l
1652.9448 605.71875 1652.0494 606.6142 1650.9448 606.6142 c
1637.937 606.6142 l
1636.8324 606.6142 1635.937 605.71875 1635.937 604.6142 c
1635.937 551.92126 l
1635.937 550.81671 1636.8324 549.92126 1637.937 549.92126 c
h
1637.937 549.92126 m
S
/Cs2 SC
0 sc
0 i
-0.017452406 -0.99984771 -0.99984771 0.017452406 172.11417 127.57481 cm
/F1.1[ 15 0 0 -15 0 0]sf
-14 5.5 m
($"'\()[ 7.185059 4.995117 7.500000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
236.45668 155.07875 m
249.46455 155.07875 l
250.56912 155.07875 251.46455 154.18332 251.46455 153.07875 c
251.46455 100.38583 l
251.46455 99.281258 250.56912 98.385834 249.46455 98.385834 c
236.45668 98.385834 l
235.35211 98.385834 234.45668 99.281258 234.45668 100.38583 c
234.45668 153.07875 l
234.45668 154.18332 235.35211 155.07875 236.45668 155.07875 c
h
236.45668 155.07875 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -1472 705 cm
1708.4567 549.92126 m
1721.4646 549.92126 l
1722.5691 549.92126 1723.4646 550.81671 1723.4646 551.92126 c
1723.4646 604.6142 l
1723.4646 605.71875 1722.5691 606.6142 1721.4646 606.6142 c
1708.4567 606.6142 l
1707.3522 606.6142 1706.4567 605.71875 1706.4567 604.6142 c
1706.4567 551.92126 l
1706.4567 550.81671 1707.3522 549.92126 1708.4567 549.92126 c
h
1708.4567 549.92126 m
S
/Cs2 SC
0 sc
0 i
0 1 1 0 243.13385 127.57481 cm
-14 5.5 m
($"',)[ 7.185059 4.995117 7.500000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
347.53149 206.10237 m
399.37006 206.10237 l
403.78836 206.10237 407.37006 202.52065 407.37006 198.10237 c
407.37006 55.362209 l
407.37006 50.943932 403.78836 47.362209 399.37006 47.362209 c
347.53149 47.362209 l
343.11322 47.362209 339.53149 50.943932 339.53149 55.362209 c
339.53149 198.10237 l
339.53149 202.52065 343.11322 206.10237 347.53149 206.10237 c
h
347.53149 206.10237 m
f
[] 0 d
0.60000002 i
0 0 0 sc
1 0 0 -1 -1472 705 cm
1819.5315 498.89764 m
1871.3701 498.89764 l
1875.7883 498.89764 1879.3701 502.47937 1879.3701 506.89764 c
1879.3701 649.63782 l
1879.3701 654.05609 1875.7883 657.63782 1871.3701 657.63782 c
1819.5315 657.63782 l
1815.1132 657.63782 1811.5315 654.05609 1811.5315 649.63782 c
1811.5315 506.89764 l
1811.5315 502.47937 1815.1132 498.89764 1819.5315 498.89764 c
h
1819.5315 498.89764 m
S
0 i
1 1 1 sc
CM
511.44092 242.95276 m
583.31494 242.95276 l
587.73322 242.95276 591.31494 239.37103 591.31494 234.95276 c
591.31494 168.74803 l
591.31494 164.32976 587.73322 160.74803 583.31494 160.74803 c
511.44092 160.74803 l
507.02264 160.74803 503.44092 164.32976 503.44092 168.74803 c
503.44092 234.95276 l
503.44092 239.37103 507.02264 242.95276 511.44092 242.95276 c
h
511.44092 242.95276 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -1472 705 cm
1983.4409 462.04724 m
2055.3149 462.04724 l
2059.7332 462.04724 2063.3149 465.62897 2063.3149 470.04724 c
2063.3149 536.25195 l
2063.3149 540.67023 2059.7332 544.25195 2055.3149 544.25195 c
1983.4409 544.25195 l
1979.0227 544.25195 1975.4409 540.67023 1975.4409 536.25195 c
1975.4409 470.04724 l
1975.4409 465.62897 1979.0227 462.04724 1983.4409 462.04724 c
h
1983.4409 462.04724 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 555.62201 202.94095 cm
/F1.1[ 16 0 0 -16 0 0]sf
-24.5 5.5 m
(*#-.'$)[ 10.671875 8.000000 6.828125 7.007812 8.000000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
505.90155 231.61418 m
518.90942 231.61418 l
520.01398 231.61418 520.90942 230.71875 520.90942 229.61418 c
520.90942 176.92126 l
520.90942 175.8167 520.01398 174.92126 518.90942 174.92126 c
505.90155 174.92126 l
504.797 174.92126 503.90155 175.8167 503.90155 176.92126 c
503.90155 229.61418 l
503.90155 230.71875 504.797 231.61418 505.90155 231.61418 c
h
505.90155 231.61418 m
f
[
4
4
] 0 d
0.60000002 i
0 0 0 sc
1 0 0 -1 -1472 705 cm
1977.9016 473.38583 m
1990.9094 473.38583 l
1992.014 473.38583 1992.9094 474.28125 1992.9094 475.38583 c
1992.9094 528.07874 l
1992.9094 529.18329 1992.014 530.07874 1990.9094 530.07874 c
1977.9016 530.07874 l
1976.797 530.07874 1975.9016 529.18329 1975.9016 528.07874 c
1975.9016 475.38583 l
1975.9016 474.28125 1976.797 473.38583 1977.9016 473.38583 c
h
1977.9016 473.38583 m
S
/Cs2 SC
0 sc
0 i
-0.034899496 -0.99939084 -0.99939084 0.034899496 512.07874 204.11024 cm
/F1.1[ 15 0 0 -15 0 0]sf
-14 5.5 m
($"'\()[ 7.185059 4.995117 7.500000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
511.44092 84.212601 m
583.31494 84.212601 l
587.73322 84.212601 591.31494 80.630882 591.31494 76.212601 c
591.31494 10.007878 l
591.31494 5.5896001 587.73322 2.0078781 583.31494 2.0078781 c
511.44092 2.0078781 l
507.02264 2.0078781 503.44092 5.5896001 503.44092 10.007878 c
503.44092 76.212601 l
503.44092 80.630882 507.02264 84.212601 511.44092 84.212601 c
h
511.44092 84.212601 m
f
[] 0 d
0.60000002 i
0 0 0 sc
1 0 0 -1 -1472 705 cm
1983.4409 620.78741 m
2055.3149 620.78741 l
2059.7332 620.78741 2063.3149 624.36914 2063.3149 628.78741 c
2063.3149 694.99213 l
2063.3149 699.4104 2059.7332 702.99213 2055.3149 702.99213 c
1983.4409 702.99213 l
1979.0227 702.99213 1975.4409 699.4104 1975.4409 694.99213 c
1975.4409 628.78741 l
1975.4409 624.36914 1979.0227 620.78741 1983.4409 620.78741 c
h
1983.4409 620.78741 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 555.62201 44.20079 cm
/F1.1[ 16 0 0 -16 0 0]sf
-24.5 5.5 m
(*#-.'$)[ 10.671875 8.000000 6.828125 7.007812 8.000000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
505.90155 72.874016 m
518.90942 72.874016 l
520.01398 72.874016 520.90942 71.978592 520.90942 70.874016 c
520.90942 18.181107 l
520.90942 17.076536 520.01398 16.181107 518.90942 16.181107 c
505.90155 16.181107 l
504.797 16.181107 503.90155 17.076536 503.90155 18.181107 c
503.90155 70.874016 l
503.90155 71.978592 504.797 72.874016 505.90155 72.874016 c
h
505.90155 72.874016 m
f
[
4
4
] 0 d
0.60000002 i
0 0 0 sc
1 0 0 -1 -1472 705 cm
1977.9016 632.12598 m
1990.9094 632.12598 l
1992.014 632.12598 1992.9094 633.02142 1992.9094 634.12598 c
1992.9094 686.81891 l
1992.9094 687.92346 1992.014 688.81891 1990.9094 688.81891 c
1977.9016 688.81891 l
1976.797 688.81891 1975.9016 687.92346 1975.9016 686.81891 c
1975.9016 634.12598 l
1975.9016 633.02142 1976.797 632.12598 1977.9016 632.12598 c
h
1977.9016 632.12598 m
S
/Cs2 SC
0 sc
0 i
-0.034899496 -0.99939084 -0.99939084 0.034899496 512.07874 45.370083 cm
/F1.1[ 15 0 0 -15 0 0]sf
-14 5.5 m
($"'\()[ 7.185059 4.995117 7.500000 0.000000 ] xS
3 w
[] 0 d
0.60000002 i
/Cs1 SC
0.60223001 0.60223001 0.60223001 sc
1 0 0 -1 -1472 705 cm
1564.7244 557.92914 m
1619.6906 557.92914 l
S
0 i
CM
158.89055 147.07088 m
147.69054 151.27087 l
147.69054 142.87086 l
h
158.89055 147.07088 m
f
0 J
0 j
1 0 0 -1 -1472 705 cm
1630.8905 557.92914 m
1619.6906 553.72913 l
1619.6906 562.12915 l
h
1630.8905 557.92914 m
S
1 J
1 j
0.60000002 i
1632.7559 597.6142 m
1577.7898 597.6142 l
S
0 i
CM
94.589752 107.38583 m
105.78976 103.18583 l
105.78976 111.58583 l
h
94.589752 107.38583 m
f
0 J
0 j
1 0 0 -1 -1472 705 cm
1566.5897 597.6142 m
1577.7898 601.81415 l
1577.7898 593.41418 l
h
1566.5897 597.6142 m
S
/Cs2 SC
0 sc
1 0 0 -1 126.05511 166.09056 cm
/F1.1[ 16 0 0 -16 0 0]sf
-34 5.5 m
(/012345#6)[ 8.000000 3.507812 8.000000 8.000000 4.445312 12.492188 9.007812 8.000000 0.000000 ] xS
1 0 0 -1 128.88976 84.381897 cm
-38 5.5 m
(7\(082345#6)[ 8.000000 8.000000 3.507812 8.000000 8.000000 4.445312 12.492188 9.007812 8.000000 0.000000 ] xS
1 J
1 j
0.60000002 i
/Cs1 SC
0.60223001 0.60223001 0.60223001 sc
1 0 0 -1 -1472 705 cm
1726.5039 560.76379 m
1781.4701 560.76379 l
S
0 i
CM
320.67007 144.23622 m
309.47006 148.43622 l
309.47006 140.03622 l
h
320.67007 144.23622 m
f
0 J
0 j
1 0 0 -1 -1472 705 cm
1792.67 560.76379 m
1781.4701 556.56378 l
1781.4701 564.96381 l
h
1792.67 560.76379 m
S
1 J
1 j
0.60000002 i
1794.5354 597.6142 m
1739.5693 597.6142 l
S
0 i
CM
256.36929 107.38583 m
267.56927 103.18583 l
267.56927 111.58583 l
h
256.36929 107.38583 m
f
0 J
0 j
1 0 0 -1 -1472 705 cm
1728.3693 597.6142 m
1739.5693 601.81415 l
1739.5693 593.41418 l
h
1728.3693 597.6142 m
S
/Cs2 SC
0 sc
1 0 0 -1 293.29919 163.90945 cm
-34 5.5 m
(/09/345#6)[ 8.000000 3.507812 8.000000 8.000000 4.445312 12.492188 9.007812 8.000000 0.000000 ] xS
1 J
1 j
0.60000002 i
/Cs1 SC
0.60223001 0.60223001 0.60223001 sc
1 0 0 -1 -1472 705 cm
1902.0472 544.25195 m
1962.2067 507.23077 l
S
0 i
CM
499.74524 203.63911 m
488.00543 201.34618 l
492.40787 194.19225 l
h
499.74524 203.63911 m
f
0 J
0 j
1 0 0 -1 -1472 705 cm
1971.7452 501.3609 m
1960.0055 503.65381 l
1964.4078 510.80774 l
h
1971.7452 501.3609 m
S
1 J
1 j
0.60000002 i
1915.5886 552.9267 m
1975.748 515.90552 l
S
0 i
CM
434.05002 146.20341 m
445.78979 148.49634 l
441.38739 155.65027 l
h
434.05002 146.20341 m
f
0 J
0 j
1 0 0 -1 -1472 705 cm
1906.05 558.79657 m
1917.7898 556.50366 l
1913.3875 549.34973 l
h
1906.05 558.79657 m
S
1 J
1 j
0.60000002 i
1902.0472 620.78741 m
1960.01 662.52057 l
S
0 i
CM
497.09915 35.935211 m
490.46405 45.887871 l
485.55591 39.07098 l
h
497.09915 35.935211 m
f
0 J
0 j
1 0 0 -1 -1472 705 cm
1969.0991 669.06476 m
1962.4641 659.11212 l
1957.5559 665.92902 l
h
1969.0991 669.06476 m
S
1 J
1 j
0.60000002 i
1914.9507 613.06995 m
1972.9133 654.80316 l
S
0 i
CM
433.86145 98.474243 m
440.49655 88.521584 l
445.40472 95.338478 l
h
433.86145 98.474243 m
f
0 J
0 j
1 0 0 -1 -1472 705 cm
1905.8615 606.52576 m
1912.4966 616.47839 l
1917.4047 609.6615 l
h
1905.8615 606.52576 m
S
/Cs2 SC
0 sc
0.84804809 0.52991927 0.52991927 -0.84804809 459.07874 197.9252 cm
-34 5.5 m
(/0,9345#6)[ 8.000000 3.507813 8.000000 8.000000 4.445313 12.492188 9.007813 8.000000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
324.33069 140.90552 m
425.21259 140.90552 l
426.31717 140.90552 427.21259 140.01009 427.21259 138.90552 c
427.21259 111.72441 l
427.21259 110.61984 426.31717 109.72441 425.21259 109.72441 c
324.33069 109.72441 l
323.22614 109.72441 322.33069 110.61984 322.33069 111.72441 c
322.33069 138.90552 l
322.33069 140.01009 323.22614 140.90552 324.33069 140.90552 c
h
324.33069 140.90552 m
f
1 w
1 J
1 j
[
4
4
] 0 d
0.60000002 i
0 0 0 sc
1 0 0 -1 -1472 705 cm
1796.3307 564.09448 m
1897.2126 564.09448 l
1898.3171 564.09448 1899.2126 564.98993 1899.2126 566.09448 c
1899.2126 593.27557 l
1899.2126 594.38013 1898.3171 595.27557 1897.2126 595.27557 c
1796.3307 595.27557 l
1795.2261 595.27557 1794.3307 594.38013 1794.3307 593.27557 c
1794.3307 566.09448 l
1794.3307 564.98993 1795.2261 564.09448 1796.3307 564.09448 c
h
1796.3307 564.09448 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 374.70471 190.51181 cm
-30.5 5.5 m
(!*:%;<=)[ 11.664062 10.671875 8.156250 5.937500 8.585938 8.000000 0.000000 ] xS
1 0 0 -1 373.69684 126.40552 cm
-14.5 5.5 m
($"'\()[ 7.664062 5.328125 8.000000 0.000000 ] xS
1 0 0 -1 292.79526 86.720474 cm
-38 5.5 m
(7\(018345#6)[ 8.000000 8.000000 3.507812 8.000000 8.000000 4.445312 12.492188 9.007812 8.000000 0.000000 ] xS
0.84804809 0.52991927 0.52991927 -0.84804809 471.02145 154.02655 cm
-38 5.5 m
(\(107\(345#6)[ 8.000000 8.000000 3.507813 8.000000 8.000000 4.445313 12.492188 9.007813 8.000000 0.000000 ] xS
0.81915206 -0.57357645 -0.57357645 -0.81915206 469.16522 91.678261 cm
-38 5.5 m
(\(1097345#6)[ 8.000000 8.000000 3.507813 8.000000 8.000000 4.445313 12.492188 9.007813 8.000000 0.000000 ] xS
0.81915206 -0.57357645 -0.57357645 -0.81915206 454.53833 52.722599 cm
-34 5.5 m
(/0,>345#6)[ 8.000000 3.507813 8.000000 8.000000 4.445313 12.492188 9.007813 8.000000 0.000000 ] xS
ep
end
%%Trailer
%%EOF
