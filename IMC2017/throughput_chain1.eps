%!PS-Adobe-3.0 EPSF-3.0
%%HiResBoundingBox: 0.000000 0.000000 413.000000 121.000000
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.12.4 (Build 16E195) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 413 121
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 413 121
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: GillSans
%!FontType1-1.0: GillSans 1.0000.1.0000
/FontInfo 1 dict dup begin
/FSType 6 def
end readonly def
14 dict begin/FontName /GillSans def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /H put
dup 34 /t put
dup 35 /p put
dup 36 /e put
dup 37 /r put
dup 38 /f put
dup 39 /N put
dup 40 /A put
dup 41 /T put
dup 42 /a put
dup 43 /c put
dup 44 /h put
dup 45 /zero put
dup 46 /one put
dup 47 /period put
dup 48 /three put
dup 49 /six put
dup 50 /space put
dup 51 /M put
dup 52 /B put
dup 53 /s put
dup 54 /seven put
dup 55 /two put
dup 56 /five put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[2048 -1163 1 index div -473 2 index div 2191 3 index div 1896 5 -1 roll div]cvx def
/sfnts [<

43650A2D2C2069B04061B0008B20B12CC08A8CB8100062602B0C642364615C58B00361592D2CB100032545685458B0032545B0032545606820B004252344B0042523441BB00325204568208A2344B00325456860B003252344592D2CB00325204568208A2344B00325456860B0032523442D2CB00943588721C01BB01243588745B0112BB0472344B0477AE41B038A45186920B04723448A8A8720B0A05158B0112BB0472344B0477AE41B21B0477AE4595959182D2C208A4523456860442D2C456A422D2C01182F2D2C01B00425B004254964234564696120B080626AB00225B00225618CB0462344218A10B046F6212D2C01B0022545B002254564606AB00325456A6120B00425456A208A8B65B0042523448CB00325234421212D2C01456823456961B00325456A6120B00425456A208A8B65B0042523448CB00325234421212D2C018A8A45642345646164422D2C01B0022543B04054B0022543B000545A58B003252045B040614459B0022543B00054B0022543B040545A58B004252045B040604459212121212D2C014B525843B00225452361441B2121592D2C014B525843B00225452360441B2121592D2C4B525845441B2121592D2C0120B003252349B04060B0206320B000525823B002253823B002256538008A63381B212121212159012D2C4B505845441B2121592D2C01B005251023208AF500B0016023EDEC2D2C01B005251023208AF500B0016123EDEC2D2C01B0062510F500EDEC2D2C462346608A8A462320468A608A61B8FF8062232010238AB14B4B8A70456020B0005058B00161B8FFBA8B1BB0468C59B0106068013A2D2C2045B003254652583F1B2111592D2C2045B003254650583F1B2111592D2C00B00743B006430B2D2C4B5258B00425B0042549B00425B00425496120B0005458212043B0005558591BB04054582043B0005458591B2043B00054581BB00325B8FFC03859595959212121212D2C4B52584365381B2121592D2C4B525843381B2121592D2C21210C6423648BB84000622D2C21B08051580C6423648BB82000621BB200402F2B59B002602D2C21B0C051580C6423648BB81555621BB200802F2B59B002602D2C0C6423648BB84000626023212D2CB4000100000015B00826B00826B00826B008260F10161345683AB001162D2CB4000100000015B00826B00826B00826B008260F1016134568653AB001162D2CB0134358031B02592D2CB0134358021B03592D2CB00A2B2310203CB0172B2D2CB0282B8A102320D023B0102BB00558C01B3C59201011B00012012D2C4B53234B515A5820458A60441B2121592D2C4B53234B515A58381B2121592D2C01B0022510D023C901B00113B0001410B0013CB001162D2C01B00013B001B0032549B0031738B001132DB800962C4BB800095058B101018E59B801FF85






00>] def
/CharStrings 26 dict dup begin
/.notdef 0 def
/space 1 def
/period 2 def
/zero 3 def
/one 4 def
/two 5 def
/three 6 def
/five 7 def
/six 8 def
/seven 9 def
/A 10 def
/B 11 def
/H 12 def
/M 13 def
/N 14 def
/T 15 def
/a 16 def
/c 17 def
/e 18 def
/f 19 def
/h 20 def
/p 21 def
/r 22 def
/s 23 def
/t 24 def
/gid422 25 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontInfo 1 dict dup begin
/FSType 6 def
end readonly def
/FontType 1 def
/FontMatrix [ 0.00048828125 0 0 0.00048828125 0 0 ] def
/FontBBox{-1163 -473 2191 1896}def
/UniqueID 4259537 def
currentdict currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA5567765E71F2B911B3C5586B741EEB93F3C73016EC16BFF283758900903D203992EFC8BAFAF13579C602F38C9264C9384F249EBFD8DD5BFBB9BE844B0E83BCFE532E688793A86D21BEE67A3FDA79F71BB74C795FBE552F80BB26D30B0A06A826D35A0A41663E4DFBF946E4EBDEA1E35418C4091E08224CBF33324514DB535F90313443139970820A1EFD857B93768FAF4541D272A752348DB08AF184690AB98E357EB364E4FD9D915858179C66E68288458B3C3EBB542D6FE676E526E88A618EE23CBCB782AF3BD59060AED12B36C0A38C6434F2AA492D755B39032815E1C27813132926F45E7BC7BF4102916E6C6B141DF083121E9702379341B642B8AFCB49A1C79F2F1524FE7E717744384E62BF837C68E894017443B0F21A7D231E58FD27B5F6BCEED14A4C949B58F23F8EEBBC311B10CA696C8E02FEAB83196D6CA28AD75508E7B598A7025206E7DE32DD54486C4A03E28438F065FF58CF31F3BF477AB7D9D78B39C8F19B599AA8ADCC2E9C591C5C277DC1DCDD5E16D27DC52924134235DFDB1BDD713CC421C4172E0A87DA14333E1BD3B3199BD4F733CF8C50E7601F401845E6EA5FFCB67E229BC2F589B5C07BC7A08EA3096D60D374C1CFC2A3842EA9DEE42C387310060F643981795AECD80E10ED22106D059FC4C379E2B3DBB2A48F1FE1CEE8B478537005A71E97EFD4D2FAA6D08728B2AFC5545E02F2687B8A20AA4C4D64409B47A3B1692E3B6CE56495A2BA900CFEDB1E25A445C0C38B3710DB661987FA16DEEB25D9BDCBBFBB264EBD0BCC59B1936A894FC89796A96414A792EAC2BDF5B0E9442549FB506B51C7
50727A9AEE5A1ABF82DB77BD7C2115C212DC67B30EE4587B4CD50BC815A0865E6711FA1C739475F8049ADDDAF17845E67F47739110344A7634DFCA793D6FCBDC8CABD1E61F24EC105C96EADA62A4E2B0B9609506976103BDFD3D697A6AF1455FAEBA534E0C925A8505C271CD665D2187C19CB3C59D8664EE15E51FF24A4F7B2BD0299CBAE8214FCA5373F794479041F8B537501AC7041A2589B34BFC1A7218A06E710A44AF5A7BDAABA38D0C3E29C1E37A1720CEA3911D674BC818EA0BB6A2E9AB5BC82E9957780200D8D2CCC40314E3A7D9D8563466F31A829FD28011F082E1B5423B421F779BDD719B707355AF6031F9002DAC38523040CA0C1D61044FF0B1863769139C07557A7A5A89408B2392F372799BAA9862CBCEAD9A345A6C3224BA60F486F74835E2449B95362AD1FA17FFE2E5EC91651980C28263A0DB6853E960FBC249001592B1DAEB05EDB5F1A6BCB8C5D9B615B5BD521C2580F3AE99895A9B53750AFA05D25D7127A74FE64E7A9BA4B40F314D3B55AD104F81ACBF5245B0707CE1B7C13BCE453EF5B5F00910310FF706D0CA90D4A57F9574C51672DA49C3121A841B90ECC6AF5180C0F9CF080DD331D67B10DB9E0609978C58BD00043320D6BE574F885A38D28973CB4610D3508DAAD90B85E6D590B5E7CC057003D047B9D360EB1AB9AC51C3D15D511AA31A57A57FA7B36FFCCA42D15699ECADE0DD1FF264B9E80C8E675AB221F0376C63AF0E80F723DBC54EC56BE3E405E42D5F9302DDE085975520172AEE5B57AA8DE0BBFEB16616A4A26F6785A3964009BBEF305CC174A7ADE7471D4F1DB5109149519B8B32060A827E468E14EDF878DF71DEC04E51F02AAF65A9A773A54D26632B5B27FFA330C253FC66A60DB2425A861110825E7A003E643FBD77C4DEBBB732042E5B6E68BB196DBE73DFD821DA9335FFFE5BB42A19178D4B7257D3A9AF7C0E844CE43411F850AC3519A2522D3E0CD9941DBDF34FB271A2095D3124954C22CE805B63CB2E48CDA8101AB5D4CA118FBC3B33C77BF0252213EBC92E4F83960CC03273AF694978790C2DCA2984C39AA7CCC41F5307E88A8FE0F6F575309E2E45BBCD227DE18A6458742C3F020738D380EDDF9DED53632D9A487B1D1A550735C21A698F483ABD05FFD51957C3BC5171E6FC4EB361F79CDD88EDB372E4C0634FFE501DB4841E4572291742FD383041E275AD7300880A3DDC15891826B26217DDCB590FE5935603A921D83BACFA4937CA02D9A7C07529BFE46B094F9797FBB4756926C0E77CFE98C32948D75889E5B07D63A29B9551F3FE3D4C34AE5CE23ABB364557C4C0F824802375AFE41882845FB5E70E8D506F92ED2D394D594C420E521678A9FCA40473A3D59B755050F19FE709F413D188440D0B266EE4911E800A039929046CAF72AA3227EC74CB4D8729A21377B30ED8FAF32D2B
EEE78FAFCA8D7D1B60C7505DFDA68EA3D4A3DEA801BD358CEE2FE0D4BF3005102A9A51803B3DBFFFE3E648222A7D85297C9B1CC744AB904859B420724A13A5E35507CBCA6D3662A0193B3E6CF5FD00013A188EAFDF8FDB69BD3E76FD4CB31EE413BAE94E7DF1C70CE95458585F1C680A030D6EB8E8C40E92CA8EB4DDB4BCF633A2C8263F145E93C908E8B3113286FC2729C7541ECB84D723AC9397DEE9F855CD977D2E296FB787EA00294A9ACE868B3BC2F5C59FE0B890D902EF2DA5B3279DA59B369374D6E94BC5453BF01264CD69464D9493341F1AD92F9A97483E0A89A7E6E740657837EB860339F0E402C516367DC64C4E85BC74D0B12548E8EAB3514DD5B9EA219E6644FDCE3479FE01E6E28DCADA6CCCDF4AC2F72E2D430D504AA1C2BC421CAEC7A8919ED53891413F9906A3C4B8403E16A9C6F30B1B34DBCF54A9BE41CFD8022446EFCD665DBE2112BB05B02D4523D610A8E19A2CA443B23BD2033EE4D6A1568BC606A34EF1ADDA383734768F383FDAD713481A27F45AC52723462362A1205B0BD30F29189E2F3F417BBC95770E153CB0044C936CAB54710B1974E8D1A8B6C5058873E8518329F40F0C2694DF5460556BB09AEB19B403930A0B60B0A0EEED9A3943D0678E895E213EA8531333D3D1673448E51851907A277C987B98C7C7556F2A86E9ADC2911B6FED0B5FE91BE359760DCB7C93814FF50A3FAAA2E978B525917146C6639334E15DE93CAF912FBD8389330C6E1EE1090022706A066E322401BAB0B5BD413D4CA96752002E61D1B452AD12F6A1D9FB39D518C4EE2D997B054354E80CE0390C43FB3C66BD1568B2F163D99CCA92687F73BC55488E1858D28705CAD7A22AA90FA9A235EC2DD90DB7DEB93168F39D7BDAE249D2256E7FB478202D81171CFF6A85F0DDA6A3585DC3CBF108169945A8D0001B874672AC9E51CB6326EF054F6B0436B1B70391319DF3F55DC8D052C3E5B5C5A6E77F540CEBB5F555635AC747A8F326DF7D79A3D526E5E6C71E0968A190C82A5BD5BE48B999FA60F16DC29A8E3F68F72100D8A0DC1B09829B31EE59699F2E0D69F90CC5B49E25C90038215CD8F1153B541725D74CFAE0220F5C120F4164C01FC93A9CB0B642CC5BD2210ECE7A22AB45C6E5CD999BE9C963927D73E2D7A0AE7B04D1AFE7439A6B2C73551D572E3C6F50A310906A85DF5C6CBC2049A824616C2ECD425F9CDF61005997C93803E81862B33D7BD79BA9FF24107B95897E60F01763EB574ECCD36CC10AFED424732B59A659562497D3FA123B41A2BFA10704DDAD01F42A56488E1D960E2DB10B8F93ADAE403064AACE4E1103AA3B6830596A4CA725534E59DE3ADAAF727C8A249C78F47951A34AD101E05EB34CCCE6CD38C17A95627D7EB5A1DAC40AE95CB8E449D3FAD3078A0964ADE6533F325C17DD8EA8013D3687E17041B902C95B
D187F67B50E5A748B8F32CBE32CE02FFDD26E61D14791156491815B53843268212EAE5F06A52435EE06CC80B45E948F620CC1EFEDD2C0FF3ED64FBE553D7C29B8D94A03451C529E2FECECDDF68CC65A20BF3AC77F8F6FCDF5D2D6756C0B785A3CFB4E64E66E3889950FA9062500A66F944A40498294308C55BE7B82BBAC35215A388BC57952EF49D352C2505217D871B3ACE1E9F4BE9FFF61EE484683B0D052A85AD60AE9A700807F324D2445D3764A05232280080467EDD15B65C248717F99EE737653AA701DDDB25C63BE86B2EE06673F7B81E3C46717A77CADFB2E414F5009A86C44055F3D3627F9D6B78792C3CBAB3788FD76025DC4A5B1D9DFC05F5546F0E343C58A4B0FAE05DDC79846866372779D59560D996A3108472DD6813CA6C4AAA07BE7BF671088D47FBEF464545EC3CF15731FF7E67076B0B190091FB7C7D464295343E6C7F16EF57EFECB5AC7F2BBCEC424DE78E388968281BE9A08E98FF975600721E4D478E8DC68165AE80E4B80E6388931F3ED2AA911B1220B9177034A22E7E2926C61F71CB230E6EDFE3D6C97300B202CBD82F3980A219BA698881DBB4A190DE616B89DF28C00C134EA9F51E20C2C6EC3F8C4891764AB6F5DBEA3FC694C826C979E80CBC9F97EB08005ED2081DFCA7D79633DC30718C99F1FEBEE8B612CEB9D22B2AD4D78723027B8B0A289A9192759E12FFC53A448B3A53388597F7AF8BDC78400E9CB0A7FBFE5316B659B53030CF
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/GillSans cguidfix
/F1.1/GillSans renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ { 1.8008  exp } bind { 1.8008  exp } bind { 1.8008  exp } bind ] def 
/MatrixABC [ 0.4295 0.2318 0.0204 0.3278 0.6722 0.1111 0.1933 0.0960 0.9578 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
[ /CIEBasedA 5 dict dup begin /WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeA { { 1.8008  exp } bind  exec} bind 
def 
/MatrixA [ 0.9642 1.0000 0.8249 ] def 
/RangeLMN [ 0.0 2.0000 0.0 2.0000 0.0 2.0000 ] def 
/DecodeLMN [ { 0.9857  mul} bind { 1.0000  mul} bind { 1.3202  mul} bind ] def 
end ] /Cs2 exch/ColorSpace dr pop
%%EndPageSetup
/Cs1 SC
1 1 1 sc
q
0 0 413 121 rc
-1548 486 m
762 486 l
762 -1863 l
-1548 -1863 l
h
-1548 486 m
f
10.551172 103.32284 m
82.425186 103.32284 l
86.843468 103.32284 90.425186 99.741112 90.425186 95.322838 c
90.425186 29.118113 l
90.425186 24.699835 86.843468 21.118113 82.425186 21.118113 c
10.551172 21.118113 l
6.132894 21.118113 2.551172 24.699835 2.551172 29.118113 c
2.551172 95.322838 l
2.551172 99.741112 6.132894 103.32284 10.551172 103.32284 c
h
10.551172 103.32284 m
f
1 J
1 j
0.60000002 i
0 0 0 sc
1 0 0 -1 -1548 486 cm
1558.5511 382.67715 m
1630.4252 382.67715 l
1634.8435 382.67715 1638.4252 386.25888 1638.4252 390.67715 c
1638.4252 456.8819 l
1638.4252 461.30017 1634.8435 464.8819 1630.4252 464.8819 c
1558.5511 464.8819 l
1554.1329 464.8819 1550.5511 461.30017 1550.5511 456.8819 c
1550.5511 390.67715 l
1550.5511 386.25888 1554.1329 382.67715 1558.5511 382.67715 c
h
1558.5511 382.67715 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 39.464066 63.311028 cm
/F1.1[ 16 0 0 -16 0 0]sf
-24.5 5.5 m
(!""#$%&)[ 11.664062 5.328125 5.328125 8.000000 7.664062 6.335938 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
169.29134 103.32284 m
241.16534 103.32284 l
245.58362 103.32284 249.16534 99.741112 249.16534 95.322838 c
249.16534 29.118113 l
249.16534 24.699835 245.58362 21.118113 241.16534 21.118113 c
169.29134 21.118113 l
164.87305 21.118113 161.29134 24.699835 161.29134 29.118113 c
161.29134 95.322838 l
161.29134 99.741112 164.87305 103.32284 169.29134 103.32284 c
h
169.29134 103.32284 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -1548 486 cm
1717.2914 382.67715 m
1789.1653 382.67715 l
1793.5836 382.67715 1797.1653 386.25888 1797.1653 390.67715 c
1797.1653 456.8819 l
1797.1653 461.30017 1793.5836 464.8819 1789.1653 464.8819 c
1717.2914 464.8819 l
1712.873 464.8819 1709.2914 461.30017 1709.2914 456.8819 c
1709.2914 390.67715 l
1709.2914 386.25888 1712.873 382.67715 1717.2914 382.67715 c
h
1717.2914 382.67715 m
S
0 i
1 1 1 sc
CM
330.86612 103.32284 m
402.74014 103.32284 l
407.15842 103.32284 410.74014 99.741112 410.74014 95.322838 c
410.74014 29.118113 l
410.74014 24.699835 407.15842 21.118113 402.74014 21.118113 c
330.86612 21.118113 l
326.44785 21.118113 322.86612 24.699835 322.86612 29.118113 c
322.86612 95.322838 l
322.86612 99.741112 326.44785 103.32284 330.86612 103.32284 c
h
330.86612 103.32284 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -1548 486 cm
1878.8661 382.67715 m
1950.7401 382.67715 l
1955.1584 382.67715 1958.7401 386.25888 1958.7401 390.67715 c
1958.7401 456.8819 l
1958.7401 461.30017 1955.1584 464.8819 1950.7401 464.8819 c
1878.8661 464.8819 l
1874.4479 464.8819 1870.8661 461.30017 1870.8661 456.8819 c
1870.8661 390.67715 l
1870.8661 386.25888 1874.4479 382.67715 1878.8661 382.67715 c
h
1878.8661 382.67715 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 205.49211 63.311028 cm
-16 5.5 m
('\(\))[ 12.492188 9.070312 0.000000 ] xS
1 0 0 -1 375.04724 63.311028 cm
-24.5 5.5 m
(\(#*+,$)[ 10.671875 8.000000 6.828125 7.007812 8.000000 0.000000 ] xS
3 w
0.60000002 i
/Cs1 SC
0.60223001 0.60223001 0.60223001 sc
1 0 0 -1 -1548 486 cm
1638.4252 402.51968 m
1693.3914 402.51968 l
S
0 i
CM
156.59132 83.480316 m
145.39133 87.680321 l
145.39133 79.280319 l
h
156.59132 83.480316 m
f
0 J
0 j
1 0 0 -1 -1548 486 cm
1704.5913 402.51968 m
1693.3914 398.31967 l
1693.3914 406.7197 l
h
1704.5913 402.51968 m
S
1 J
1 j
0.60000002 i
1709.2914 442.20471 m
1654.3252 442.20471 l
S
0 i
CM
95.125191 43.795277 m
106.32519 39.59528 l
106.32519 47.995277 l
h
95.125191 43.795277 m
f
0 J
0 j
1 0 0 -1 -1548 486 cm
1643.1252 442.20471 m
1654.3252 446.40472 l
1654.3252 438.00473 l
h
1643.1252 442.20471 m
S
1 J
1 j
0.60000002 i
1797.1653 402.51968 m
1854.9662 402.51968 l
S
0 i
CM
318.16614 83.480316 m
306.96613 87.680321 l
306.96613 79.280319 l
h
318.16614 83.480316 m
f
0 J
0 j
1 0 0 -1 -1548 486 cm
1866.1661 402.51968 m
1854.9662 398.31967 l
1854.9662 406.7197 l
h
1866.1661 402.51968 m
S
1 J
1 j
0.60000002 i
1870.8661 442.20471 m
1813.0653 442.20471 l
S
0 i
CM
253.86534 43.795277 m
265.06534 39.59528 l
265.06534 47.995277 l
h
253.86534 43.795277 m
f
0 J
0 j
1 0 0 -1 -1548 486 cm
1801.8654 442.20471 m
1813.0653 446.40472 l
1813.0653 438.00473 l
h
1801.8654 442.20471 m
S
1 1 1 sc
CM
75.417313 91.984253 m
88.425186 91.984253 l
89.529755 91.984253 90.425186 91.088821 90.425186 89.984253 c
90.425186 37.29134 l
90.425186 36.186771 89.529755 35.29134 88.425186 35.29134 c
75.417313 35.29134 l
74.312744 35.29134 73.417313 36.186771 73.417313 37.29134 c
73.417313 89.984253 l
73.417313 91.088821 74.312744 91.984253 75.417313 91.984253 c
h
75.417313 91.984253 m
f
1 w
1 J
1 j
[
4
4
] 0 d
0.60000002 i
0 0 0 sc
1 0 0 -1 -1548 486 cm
1623.4174 394.01575 m
1636.4252 394.01575 l
1637.5298 394.01575 1638.4252 394.91116 1638.4252 396.01575 c
1638.4252 448.70865 l
1638.4252 449.81323 1637.5298 450.70865 1636.4252 450.70865 c
1623.4174 450.70865 l
1622.3127 450.70865 1621.4174 449.81323 1621.4174 448.70865 c
1621.4174 396.01575 l
1621.4174 394.91116 1622.3127 394.01575 1623.4174 394.01575 c
h
1623.4174 394.01575 m
S
/Cs2 SC
0 sc
0 i
0 1 1 0 81.594475 64.480316 cm
/F1.1[ 15 0 0 -15 0 0]sf
-14 5.5 m
($",-)[ 7.185059 4.995117 7.500000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
163.44487 91.984253 m
176.45274 91.984253 l
177.55731 91.984253 178.45274 91.088821 178.45274 89.984253 c
178.45274 37.29134 l
178.45274 36.186771 177.55731 35.29134 176.45274 35.29134 c
163.44487 35.29134 l
162.3403 35.29134 161.44487 36.186771 161.44487 37.29134 c
161.44487 89.984253 l
161.44487 91.088821 162.3403 91.984253 163.44487 91.984253 c
h
163.44487 91.984253 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -1548 486 cm
1711.4448 394.01575 m
1724.4528 394.01575 l
1725.5574 394.01575 1726.4528 394.91116 1726.4528 396.01575 c
1726.4528 448.70865 l
1726.4528 449.81323 1725.5574 450.70865 1724.4528 450.70865 c
1711.4448 450.70865 l
1710.3403 450.70865 1709.4448 449.81323 1709.4448 448.70865 c
1709.4448 396.01575 l
1709.4448 394.91116 1710.3403 394.01575 1711.4448 394.01575 c
h
1711.4448 394.01575 m
S
/Cs2 SC
0 sc
0 i
-0.017452406 -0.99984771 -0.99984771 0.017452406 169.62204 64.480316 cm
-14 5.5 m
($",-)[ 7.185059 4.995117 7.500000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
234.46455 91.984253 m
247.47243 91.984253 l
248.577 91.984253 249.47243 91.088821 249.47243 89.984253 c
249.47243 37.29134 l
249.47243 36.186771 248.577 35.29134 247.47243 35.29134 c
234.46455 35.29134 l
233.35999 35.29134 232.46455 36.186771 232.46455 37.29134 c
232.46455 89.984253 l
232.46455 91.088821 233.35999 91.984253 234.46455 91.984253 c
h
234.46455 91.984253 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -1548 486 cm
1782.4646 394.01575 m
1795.4724 394.01575 l
1796.577 394.01575 1797.4724 394.91116 1797.4724 396.01575 c
1797.4724 448.70865 l
1797.4724 449.81323 1796.577 450.70865 1795.4724 450.70865 c
1782.4646 450.70865 l
1781.36 450.70865 1780.4646 449.81323 1780.4646 448.70865 c
1780.4646 396.01575 l
1780.4646 394.91116 1781.36 394.01575 1782.4646 394.01575 c
h
1782.4646 394.01575 m
S
/Cs2 SC
0 sc
0 i
0 1 1 0 240.64172 64.480316 cm
-14 5.5 m
($",.)[ 7.185059 4.995117 7.500000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
325.32675 91.984253 m
338.33463 91.984253 l
339.43921 91.984253 340.33463 91.088821 340.33463 89.984253 c
340.33463 37.29134 l
340.33463 36.186771 339.43921 35.29134 338.33463 35.29134 c
325.32675 35.29134 l
324.2222 35.29134 323.32675 36.186771 323.32675 37.29134 c
323.32675 89.984253 l
323.32675 91.088821 324.2222 91.984253 325.32675 91.984253 c
h
325.32675 91.984253 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -1548 486 cm
1873.3268 394.01575 m
1886.3346 394.01575 l
1887.4392 394.01575 1888.3346 394.91116 1888.3346 396.01575 c
1888.3346 448.70865 l
1888.3346 449.81323 1887.4392 450.70865 1886.3346 450.70865 c
1873.3268 450.70865 l
1872.2222 450.70865 1871.3268 449.81323 1871.3268 448.70865 c
1871.3268 396.01575 l
1871.3268 394.91116 1872.2222 394.01575 1873.3268 394.01575 c
h
1873.3268 394.01575 m
S
/Cs2 SC
0 sc
0 i
-0.034899496 -0.99939084 -0.99939084 0.034899496 331.50394 64.480316 cm
-14 5.5 m
($",-)[ 7.185059 4.995117 7.500000 0.000000 ] xS
1 0 0 -1 126.59054 105.33465 cm
/F1.1[ 16 0 0 -16 0 0]sf
-34 5.5 m
(./01234#5)[ 8.000000 3.507812 8.000000 8.000000 4.445312 12.492188 9.007812 8.000000 0.000000 ] xS
1 0 0 -1 283.86612 106.48425 cm
-34 5.5 m
(./06234#5)[ 8.000000 3.507812 8.000000 8.000000 4.445312 12.492188 9.007812 8.000000 0.000000 ] xS
1 0 0 -1 129.42519 15.12205 cm
-38 5.5 m
(1./-7234#5)[ 8.000000 8.000000 3.507812 8.000000 8.000000 4.445312 12.492188 9.007812 8.000000 0.000000 ] xS
1 0 0 -1 286.49606 15.12205 cm
-38 5.5 m
(1./18234#5)[ 8.000000 8.000000 3.507812 8.000000 8.000000 4.445312 12.492188 9.007812 8.000000 0.000000 ] xS
ep
end
%%Trailer
%%EOF
